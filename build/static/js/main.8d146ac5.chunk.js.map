{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","name","email","id","react_default","a","createElement","className","src","concat","alt","CardList","_ref","robots","cardArray","map","user","i","Components_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","height","border","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","target","value","state","_this2","fetch","then","response","json","users","_this3","filteredList","filter","toLowerCase","includes","length","Components_SearchBox","Components_Scroll","Components_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_Containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAaeA,EAZH,SAACC,GAAS,IACXC,EAAiBD,EAAjBC,KAAMC,EAAWF,EAAXE,MAAOC,EAAIH,EAAJG,GACpB,OACAC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uDACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAG,wBAAAC,OAA0BN,EAA1B,YAAwCO,IAAI,gBACpDN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,IACZH,EAAAC,EAAAC,cAAA,UAAKL,GACLG,EAAAC,EAAAC,cAAA,SAAIJ,MCQAS,EAXE,SAAAC,GAAc,IAAZC,EAAYD,EAAZC,OACTC,EAAUD,EAAOE,IAAI,SAACC,EAAMC,GAC9B,OAAOb,EAAAC,EAAAC,cAACY,EAAD,CAAMC,IAAKN,EAAOI,GAAGd,GAAIJ,MAAI,EAACI,GAAIU,EAAOI,GAAGd,GAAID,MAAOW,EAAOI,GAAGf,MAAOD,KAAMY,EAAOI,GAAGhB,SAGnG,OACIG,EAAAC,EAAAC,cAAA,WACCQ,ICIMM,EAdG,SAAAR,GAAiCA,EAA/BS,YAA+B,IAAlBC,EAAkBV,EAAlBU,aAC7B,OACIlB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAAA,SACAC,UAAU,mCACVgB,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCEHI,SATA,SAAC1B,GAChB,OAEII,EAAAC,EAAAC,cAAA,OAAKqB,MAAO,CAACC,UAAU,SAAUC,OAAQ,QAASC,OAAQ,oBACrD9B,EAAM+B,YC2CAC,cAxCX,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACTC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAYJI,eAAiB,SAACC,GACdR,EAAKS,SAAS,CAACrB,YAAaoB,EAAME,OAAOC,SAZzCX,EAAKY,MAAM,CACPhC,OAAQ,GACRQ,YAAa,IAJRY,mFAOM,IAAAa,EAAAV,KACfW,MAAM,8CACLC,KAAK,SAAAC,GAAQ,OAAGA,EAASC,SACzBF,KAAK,SAAAG,GAAK,OAAIL,EAAKJ,SAAS,CAAC7B,OAAQsC,uCAQlC,IAAAC,EAAAhB,KACEiB,EAAcjB,KAAKS,MAAMhC,OAAOyC,OAAO,SAAAzC,GACzC,OAAOA,EAAOZ,KAAKsD,cAAcC,SAASJ,EAAKP,MAAMxB,YAAYkC,iBAErE,OAAiC,IAA7BnB,KAAKS,MAAMhC,OAAO4C,OACXrD,EAAAC,EAAAC,cAAA,qBAIPF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAW,MAAf,iBACAH,EAAAC,EAAAC,cAACoD,EAAD,CAAWpC,aAAcc,KAAKI,iBAC9BpC,EAAAC,EAAAC,cAACqD,EAAD,KACAvD,EAAAC,EAAAC,cAACsD,EAAD,CAAU/C,OAAQwC,aAhChBQ,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECTNC,IAASC,OAAOhE,EAAAC,EAAAC,cAAC+D,EAAD,MAAQC,SAASC,eAAe,SDwH1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC","file":"static/js/main.8d146ac5.chunk.js","sourcesContent":["import React from 'react'\r\nconst Card =(props) =>{\r\n    const {name, email, id}=props\r\n    return(\r\n    <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n        <img src={`https://robohash.org/${id}?200x200`} alt='djkfhvbffds' />\r\n        <div className=''>\r\n           <h2>{name}</h2>\r\n           <p>{email}</p> \r\n        </div>\r\n    </div>\r\n    )\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\n\r\nconst CardList = ({robots}) => {\r\n    const cardArray=robots.map((user, i) => {\r\n        return <Card key={robots[i].id} Card id={robots[i].id} email={robots[i].email} name={robots[i].name}/>;\r\n    \r\n    })\r\n    return(\r\n        <div >\r\n        {cardArray}  \r\n        </div>\r\n    );\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n    return (\r\n        <div className='pa2'>\r\n        <input \r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search' \r\n        placeholder='search robots' \r\n        onChange={searchChange}\r\n        />   \r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default SearchBox","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\nreturn (\r\n    \r\n    <div style={{overflowY:'scroll', height: '800px', border: '5px solid black'}}>\r\n        {props.children}\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\nimport CardList from '../Components/CardList';\r\n//import {robots} from './robots';\r\nimport SearchBox from '../Components/SearchBox';\r\nimport './App.css';\r\n//import { ReactComponent } from '*.svg';\r\nimport Scroll from '../Components/Scroll';\r\n\r\nclass App extends Component{\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            robots: [],\r\n            searchfield: ''\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response=> response.json())\r\n        .then(users => this.setState({robots: users}))\r\n\r\n    }\r\n    onSearchChange = (event) => {\r\n        this.setState({searchfield: event.target.value})\r\n        \r\n        \r\n    }\r\n    render(){\r\n        const filteredList= this.state.robots.filter(robots => {\r\n            return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\r\n        })\r\n        if (this.state.robots.length === 0) {\r\n            return <h1>Loading</h1>\r\n        } \r\n        else {\r\n        return (\r\n            <div className='tc'>\r\n                <h1 className= 'f1'>Robot Friends</h1>\r\n                <SearchBox searchChange={this.onSearchChange}/>\r\n                <Scroll>\r\n                <CardList robots={filteredList}/>\r\n                </Scroll>\r\n    \r\n            </div>\r\n        );\r\n        }\r\n    }\r\n}\r\n    \r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import Card from './Card';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n// import {robots} from './robots';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}